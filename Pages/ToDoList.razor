@page "/todolist"
@using System.Text.Json
@inject IJSRuntime JSRuntime

<!-- ToDoList.razor -->
<div class="col-12 col-lg-9 col-xl-6 todo-container">
  <!-- To-Do List Content -->
  <h1>To-Do List</h1>

  <!-- Add New Task -->
  <div class="row">
    <div class="col-8">
      <input type="text" @bind="newTask" class="form-control" placeholder="Enter a new task" id="newTaskInput" name="newTaskInput" />
    </div>
    <div class="col-4">
      <button @onclick="AddTask" class="btn btn-primary w-100">Add</button>
    </div>
  </div>

  <!-- Task List -->
  <ul class="list-unstyled mt-3">
    @foreach (var task in tasks)
    {
      <!-- Task Item -->
      <li class="d-flex align-items-center mb-2">
        
        <!-- Checkbox To Toggle Completion -->
        <input type="checkbox" checked="@task.IsCompleted" @onchange="(e) => ToggleTaskCompletion(task, e)" class="form-check-input me-2" id="taskCheckbox_@task.GetHashCode()" name="taskCheckbox_@task.GetHashCode()" />

        <!-- Task Name With Line Through It If Completed -->
        <span class="flex-grow-1" style="@(task.IsCompleted ? "text-decoration: line-through;" : "")">
          @task.Name
        </span>
        
        <!-- Delete Button -->
        <button class="btn btn-secondary" @onclick="() => RemoveTask(task)">Delete</button>
      </li>
    }
  </ul>
</div>

@code {
  // New Task Input
  private string newTask = string.Empty;

  // Task List
  private List<TaskItem> tasks = new();

  // Load Tasks From Local Storage
  protected override async Task OnInitializedAsync() {
    // Get Tasks From Local Storage
    var savedTasks = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "tasks");

    // If Tasks Exist, Deserialize Them
    if (!string.IsNullOrEmpty(savedTasks))
    {
      tasks = JsonSerializer.Deserialize<List<TaskItem>>(savedTasks) ?? new List<TaskItem>();
    }
  }

  // Add New Task
  private async Task AddTask()
  {
    // Add Task If Not Empty
    if (!string.IsNullOrWhiteSpace(newTask))
    {
      // Add Task To List
      tasks.Add(new TaskItem { Name = newTask });

      // Clear New Task Input
      newTask = string.Empty;

      // Save Tasks To Local Storage
      await SaveTasks();
    }
  }

  private async Task RemoveTask(TaskItem task)
  {
    tasks.Remove(task);
    await SaveTasks();
  }

  // Toggle Task Completion
  private async Task ToggleTaskCompletion(TaskItem task, ChangeEventArgs e) {
    task.IsCompleted = (bool)e.Value;
    await SaveTasks();
  }

  // Save Tasks To Local Storage
  private async Task SaveTasks()
  {
    var json = JsonSerializer.Serialize(tasks);
    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "tasks", json);
  }

  // Task Item Class
  private class TaskItem
  {
    public string Name { get; set; } = string.Empty;
    public bool IsCompleted { get; set; }
  }
}